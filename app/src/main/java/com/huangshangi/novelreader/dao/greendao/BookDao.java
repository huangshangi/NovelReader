package com.huangshangi.novelreader.dao.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.huangshangi.novelreader.bean.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, String> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BookId = new Property(0, String.class, "bookId", true, "BOOK_ID");
        public final static Property BookImage = new Property(1, String.class, "BookImage", false, "BOOK_IMAGE");
        public final static Property BookName = new Property(2, String.class, "BookName", false, "BOOK_NAME");
        public final static Property AuthorName = new Property(3, String.class, "AuthorName", false, "AUTHOR_NAME");
        public final static Property BookType = new Property(4, String.class, "BookType", false, "BOOK_TYPE");
        public final static Property BookIntro = new Property(5, String.class, "BookIntro", false, "BOOK_INTRO");
        public final static Property LeftToRead = new Property(6, int.class, "LeftToRead", false, "LEFT_TO_READ");
        public final static Property UpdateDate = new Property(7, String.class, "updateDate", false, "UPDATE_DATE");
        public final static Property LastestChapter = new Property(8, String.class, "lastestChapter", false, "LASTEST_CHAPTER");
        public final static Property HistoryChpater = new Property(9, int.class, "historyChpater", false, "HISTORY_CHPATER");
        public final static Property BookIntroUrl = new Property(10, String.class, "bookIntroUrl", false, "BOOK_INTRO_URL");
        public final static Property BookChapterUrl = new Property(11, String.class, "bookChapterUrl", false, "BOOK_CHAPTER_URL");
        public final static Property AddShelfTime = new Property(12, String.class, "addShelfTime", false, "ADD_SHELF_TIME");
    }


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"BOOK_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: bookId
                "\"BOOK_IMAGE\" TEXT," + // 1: BookImage
                "\"BOOK_NAME\" TEXT," + // 2: BookName
                "\"AUTHOR_NAME\" TEXT," + // 3: AuthorName
                "\"BOOK_TYPE\" TEXT," + // 4: BookType
                "\"BOOK_INTRO\" TEXT," + // 5: BookIntro
                "\"LEFT_TO_READ\" INTEGER NOT NULL ," + // 6: LeftToRead
                "\"UPDATE_DATE\" TEXT," + // 7: updateDate
                "\"LASTEST_CHAPTER\" TEXT," + // 8: lastestChapter
                "\"HISTORY_CHPATER\" INTEGER NOT NULL ," + // 9: historyChpater
                "\"BOOK_INTRO_URL\" TEXT," + // 10: bookIntroUrl
                "\"BOOK_CHAPTER_URL\" TEXT," + // 11: bookChapterUrl
                "\"ADD_SHELF_TIME\" TEXT);"); // 12: addShelfTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Book entity) {
        stmt.clearBindings();
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(1, bookId);
        }
 
        String BookImage = entity.getBookImage();
        if (BookImage != null) {
            stmt.bindString(2, BookImage);
        }
 
        String BookName = entity.getBookName();
        if (BookName != null) {
            stmt.bindString(3, BookName);
        }
 
        String AuthorName = entity.getAuthorName();
        if (AuthorName != null) {
            stmt.bindString(4, AuthorName);
        }
 
        String BookType = entity.getBookType();
        if (BookType != null) {
            stmt.bindString(5, BookType);
        }
 
        String BookIntro = entity.getBookIntro();
        if (BookIntro != null) {
            stmt.bindString(6, BookIntro);
        }
        stmt.bindLong(7, entity.getLeftToRead());
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(8, updateDate);
        }
 
        String lastestChapter = entity.getLastestChapter();
        if (lastestChapter != null) {
            stmt.bindString(9, lastestChapter);
        }
        stmt.bindLong(10, entity.getHistoryChpater());
 
        String bookIntroUrl = entity.getBookIntroUrl();
        if (bookIntroUrl != null) {
            stmt.bindString(11, bookIntroUrl);
        }
 
        String bookChapterUrl = entity.getBookChapterUrl();
        if (bookChapterUrl != null) {
            stmt.bindString(12, bookChapterUrl);
        }
 
        String addShelfTime = entity.getAddShelfTime();
        if (addShelfTime != null) {
            stmt.bindString(13, addShelfTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(1, bookId);
        }
 
        String BookImage = entity.getBookImage();
        if (BookImage != null) {
            stmt.bindString(2, BookImage);
        }
 
        String BookName = entity.getBookName();
        if (BookName != null) {
            stmt.bindString(3, BookName);
        }
 
        String AuthorName = entity.getAuthorName();
        if (AuthorName != null) {
            stmt.bindString(4, AuthorName);
        }
 
        String BookType = entity.getBookType();
        if (BookType != null) {
            stmt.bindString(5, BookType);
        }
 
        String BookIntro = entity.getBookIntro();
        if (BookIntro != null) {
            stmt.bindString(6, BookIntro);
        }
        stmt.bindLong(7, entity.getLeftToRead());
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(8, updateDate);
        }
 
        String lastestChapter = entity.getLastestChapter();
        if (lastestChapter != null) {
            stmt.bindString(9, lastestChapter);
        }
        stmt.bindLong(10, entity.getHistoryChpater());
 
        String bookIntroUrl = entity.getBookIntroUrl();
        if (bookIntroUrl != null) {
            stmt.bindString(11, bookIntroUrl);
        }
 
        String bookChapterUrl = entity.getBookChapterUrl();
        if (bookChapterUrl != null) {
            stmt.bindString(12, bookChapterUrl);
        }
 
        String addShelfTime = entity.getAddShelfTime();
        if (addShelfTime != null) {
            stmt.bindString(13, addShelfTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bookId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // BookImage
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // BookName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // AuthorName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // BookType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // BookIntro
            cursor.getInt(offset + 6), // LeftToRead
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // updateDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lastestChapter
            cursor.getInt(offset + 9), // historyChpater
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // bookIntroUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // bookChapterUrl
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // addShelfTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setBookId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBookImage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthorName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBookType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBookIntro(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLeftToRead(cursor.getInt(offset + 6));
        entity.setUpdateDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLastestChapter(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHistoryChpater(cursor.getInt(offset + 9));
        entity.setBookIntroUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBookChapterUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAddShelfTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Book entity, long rowId) {
        return entity.getBookId();
    }
    
    @Override
    public String getKey(Book entity) {
        if(entity != null) {
            return entity.getBookId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Book entity) {
        return entity.getBookId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
